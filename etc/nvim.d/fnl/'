;        .
;  __   __)
; (. | /o ______  __  _.
;    |/<_/ / / <_/ (_(__
;    |
;

(require-macros :zest.macros)

(g- python_host_prog :/usr/bin/python2)
(g- python3_host_prog :/usr/bin/python3)

(require :rc.plugins)
(require :rc.options)
(require :rc.keymaps)
(require :rc.aucmds)
(require :rc.excmds)

(fn make-me-suffer [s]
  (var i 0)
  (s:gsub "." (fn [c] (when (not= c " ") (set i (+ 1 i)) (if (= 0 (% i 2)) (c:upper) (c:lower))))))

(local bind (require :zest.bind))

; text object

; line
(te- :il "g_v^")
(te- :al "$v0")

; document
(te- :ig "GVgg")
(te- :ag "GVgg")

; operator

; TODO restore cursor position
(fn comment-op [do? s t]
  (let [(x y) (vim.bo.commentstring:match "(.-)%s+(.-)")
        do-comment (fn [l] (if (and (not= "\n" l)) (.. x " " l)))
        un-comment (fn [l] (l:gsub (.. "^(%" x "%s?)") ""))]
    (s:gsub "(.-\n)" (if do? do-comment un-comment))))

(op- "<leader>u" (partial comment-op false))
(op- "<leader>c" (partial comment-op true))

;

(local search vim.fn.search)

(fn char [d]
  "get character under cursor"
  (let [d (or d 0)
        l (vim.fn.getline ".")
        n (+ d (vim.fn.col "."))]
    (vim.fn.strcharpart (l:sub n n) 0 1)))

(fn find [re flags]
  "find 're' and return character under cursor"
  (let [flags (or flags "")
        r (search re flags)]
    (if (not= r 0)
      (char))))

(set _G.find find)

(local pair
  {"(" ")" ")" "("
   "[" "]" "]" "["
   "{" "}" "}" "{"
   "<" ">" ">" "<"})

(fn fm [x flags i]
  "find matching pair"
  (let [i (or i 1)]
    (if (> i 0)
      (let [y (. pair x)
            f (find (.. x "\\|" y) flags)]
        (match f
          x (fm x flags (- i 1))
          y (fm x flags (+ i 1))
          nil false))
      true)))

(fn fma [x] ; (
  (let [pos (vim.fn.getpos ".")
        y (. pair x)]
    (if (or (= x (char)) (fm x "bW"))
      (do
        (norm- "v")
        (fm y "W"))
      (do
        (vim.fn.setpos "." pos)
        (when (fm x "W")
          (norm- "v")
          (fm y "W"))))))


(te- "a)" (fn [] (fma "(")))

;(te- "a)" (fn []
;  (find "(" "zW")
;  (norm- "v")
;  (find ")" "bW")))
;
;(te- "i)" (fn []
;  ; wait, this would break when inside parens
;  (find "(" "zW")
;  (norm- "lv")
;  (find ")" "W")
;  (norm- "h")))

;(vim.api.nvim_set_keymap "n" "f" ":call v:lua.find(nr2char(getchar()))<cr>" {:noremap true})


























