#!/usr/bin/env bash

# TODO
# alt+directional binds to split frames would be nice

hc() { herbstclient "$@" ; }
ki() { hc keybind "$@" ; }

# clean slate
hc emit_hook reload
hc keyunbind --all
hc mouseunbind --all
hc unrule -F

Mod=Mod4

# need a script that will return a colemak key and take a qwerty one to make binding things easier.

# -- autostart

# TODO add xwallpaper to hori-hori (wallpaper dotfile w/ autostart hook?)
command -v hori-hori &>/dev/null && hori-hori hook autostart --installed
xwallpaper --zoom ~/Downloads/wallpaper.jpg

# -- -- keybinds

# -- hlwm

ki $Mod-Shift-q quit
ki $Mod-Shift-r reload

# -- frame

# split frame -> change to mod1+hnei?
ki $Mod-Shift-Return split explode # the coolest shit ever
ki $Mod-u split top 0.5
ki $Mod-o split right  0.5

ki $Mod-r remove # close frame


# -- clients

# focus
ki $Mod-h         focus   left
ki $Mod-n         focus   down
ki $Mod-e         focus   up
ki $Mod-i         focus   right

# move
ki $Mod-Shift-h   shift   left
ki $Mod-Shift-n   shift   down
ki $Mod-Shift-e   shift   up
ki $Mod-Shift-i   shift   right

# resize
resizestep=0.02
ki $Mod-Mod1-h    resize  left   +$resizestep
ki $Mod-Mod1-n    resize  down   +$resizestep
ki $Mod-Mod1-e    resize  up     +$resizestep
ki $Mod-Mod1-i    resize  right  +$resizestep


# -- misc

ki $Mod-Return spawn "${TERMINAL:-xterm}"

ki Mod1-Shift-s spawn scrot-clipboard -q 100 -s

ki $Mod-space spawn layout-switch

ki Mod1-Shift-n spawn redshift-control 0 -1
ki Mod1-Shift-e spawn redshift-control 0  1

ki Mod1-n spawn redshift-control -250
ki Mod1-e spawn redshift-control  250

ki Mod1-h spawn volume-control -8
ki Mod1-i spawn volume-control  8


# tags
tag_names=( {1..9} )
tag_keys=( {1..9} 0 )

hc rename default "${tag_names[0]}" || true
for i in "${!tag_names[@]}" ; do
    hc add "${tag_names[$i]}"
    key="${tag_keys[$i]}"
    if [ -n "$key" ] ; then
        ki "$Mod-$key" use_index "$i"
        ki "$Mod-Shift-$key" move_index "$i"
    fi
done

# cycle through tags
#ki $Mod-period use_index +1 --skip-visible
#ki $Mod-comma  use_index -1 --skip-visible

# layouting
ki $Mod-t floating toggle
ki $Mod-m fullscreen toggle
#ki $Mod-f set_attr clients.focus.floating toggle
#ki $Mod-Shift-m set_attr clients.focus.minimized true
#ki $Mod-Control-m jumpto last-minimized
ki $Mod-p pseudotile toggle

# TODO I "could* have this in fennel
# (or (and
#       (compare tags.focus.curframe_wcount gt 0)
#       (close))
#     (remove))

#close_hook() {
#  local winid="$(herbstclient attr clients.focus.winid)"
#  herbstclient emit_hook node_remove "$winid"
#}

close_window_or_frame=(
or . and - compare tags.focus.curframe_wcount gt 0
         - close
   . remove)

ki $Mod-w "${close_window_or_frame[@]}"

# maybe there is a way? doesn't it need to be subshelled through
#testing() {
#  hc emit_hook wooooo
#}
#export -f testing
#ki $Mod-q spawn testing

cycle_layouts=(
and . compare tags.focus.curframe_wcount gt 1
    . cycle_layout +1 vertical horizontal)

ki $Mod-Tab "${cycle_layouts[@]}"

# fmenu
ki $Mod-BackSpace spawn scribe

# mouse
hc mousebind $Mod-Button1 move
hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize

# focus
#ki $Mod-BackSpace   cycle_monitor
#ki $Mod-Tab         cycle_all +1
#ki $Mod-Shift-Tab   cycle_all -1
#ki $Mod-c cycle
#ki $Mod-i jumpto urgent

#hc set frame_border_active_color '#222222cc'
#hc set frame_border_normal_color '#101010cc'

# -- theme

hc set smart_window_surroundings off # remove window borders and gaps when only one window in frame
hc set smart_frame_surroundings on # shouldn't this disable... frame_color too?

# gaps
hc set frame_gap 4
hc set window_gap 6
hc set frame_padding -2

# frames
hc set frame_bg_normal_color '#03030300'
hc set frame_normal_opacity 30
hc set frame_bg_active_color '#09090900'
hc set frame_active_opacity 70

hc set frame_border_normal_color '#000000'
hc set frame_border_active_color '#000000'

hc set frame_border_inner_color '#ffffff'

hc set frame_border_width 2
hc set frame_border_inner_width 1

hc set always_show_frame true
hc set frame_bg_transparent false # recommended off
#hc set frame_transparent_width 2 # depends on the above being true

# clients
attr() { hc attr "$@" ; }

attr theme.tiling.reset 1
attr theme.floating.reset 1

#attr theme.border_width 7
attr theme.border_width 2
attr theme.inner_width 1
attr theme.outer_width 1

attr theme.inner_color '#333333'
#attr theme.color '#232326'
attr theme.outer_color '#000000'

attr theme.active.inner_color '#555555'


#hc attr theme.floating.border_width 2
#hc attr theme.floating.inner_width 1

#hc attr theme.floating.outer_width 8

#hc attr theme.background_color '#ffffff'
#hc attr theme.inner_color '#ffffff'
#hc attr theme.outer_color '#ffffff'
#hc attr theme.title_color '#ffffff'

#hc attr theme.floating.background_color '#ff0000'
#hc attr theme.floating.inner_color '#323235'
#hc attr theme.floating.outer_color '#232326'

#hc attr theme.floating.active.inner_color '#636369'
#hc attr theme.floating.active.outer_color '#232326'

#hc attr theme.floating.title_color '#ff0000'

#hc attr theme.title_height 15
##hc attr theme.title_font 'Dejavu Sans:pixelsize=12'  # example using Xft
#hc attr theme.title_font '-*-fixed-medium-r-*-*-13-*-*-*-*-*-*-*'
#hc attr theme.padding_top 2  # space below the title's baseline (i.e. text depth)
#hc attr theme.active.color '#345F0Cef'
#hc attr theme.title_color '#ffffff'
#hc attr theme.normal.color '#323232dd'
#hc attr theme.urgent.color '#7811A1dd'
#hc attr theme.normal.title_color '#898989'
#hc attr theme.inner_width 1
#hc attr theme.inner_color black
##hc attr theme.border_width 1
##hc attr theme.floating.border_width 4
##hc attr theme.floating.outer_width 1
##hc attr theme.floating.outer_color black
#hc attr theme.active.inner_color '#789161'
#hc attr theme.urgent.inner_color '#9A65B0'
#hc attr theme.normal.inner_color '#606060'
## copy inner color to outer_color
#for state in active urgent normal ; do
#    hc substitute C theme.${state}.inner_color \
#        attr theme.${state}.outer_color C
#done
#hc attr theme.active.outer_width 1
#hc attr theme.background_color '#141414'

#hc set mouse_recenter_gap 0
#hc set focus_follows_mouse false

# -- rules

hc rule hook=node_add focus=on
#hc rule class=XTerm tag=3 # move all xterms to tag 3
hc rule focus=on # normally focus new clients
hc rule floatplacement=smart
#hc rule focus=off # normally do not focus new clients
# give focus to most common terminals
#hc rule class~'(.*[Rr]xvt.*|.*[Tt]erm|Konsole)' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' floating=on
hc rule title='fzfmenu' floating=on floatplacement=center focus=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off

hc set tree_style '╾│ ├└╼─┐'

# unlock, just to be sure
hc unlock

hc set_monitors 1920x1080+0+0 1920x1080+1920+0
# hc detect_monitors

# find the panel
#panel=~/.config/herbstluftwm/panel.sh
#[ -x "$panel" ] || panel=/etc/xdg/herbstluftwm/panel.sh
#for monitor in $(hc list_monitors | cut -d: -f1) ; do
#    # start it on each monitor
#    "$panel" "$monitor" &
#done
