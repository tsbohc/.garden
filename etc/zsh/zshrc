#zmodload zsh/zprof

# ;; defaults

# ;; NB
export FENNEL_MACRO_PATH="$HOME/code/zest.nvim/pure/fnl/?.fnl;$HOME/code/lime/fnl/?.fnl"
#export LUA_PATH="$HOME/code/zest.nvim/master/lua/?.lua;;"

export PATH=$HOME/.garden/bin:$HOME/.garden/etc/polybar/modules:$HOME/.local/share/gem/ruby/3.0.0/bin:$PATH
export EDITOR=nvim
export TERMINAL=alacritty
export FZF_DEFAULT_OPTS='--color=bg:-1,bg+:-1,hl:15,hl+:15,fg:7,fg+:7,info:7,prompt:7,pointer:1,header:15 --margin=0,2 --pointer="‚Ä∫" --prompt="  "'

# ;; setopts

# history
HISTFILE=$HOME/.cache/histfile
HISTSIZE=50000
SAVEHIST=$HISTSIZE

setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_reduce_blanks
setopt inc_append_history

# other
setopt share_history
setopt auto_cd
setopt no_case_glob
setopt no_auto_menu
setopt no_menu_complete

unsetopt beep # beep is the strongest warrior!

# ;; prompt
#‚¨°‚¨¢ ü¢í‚ñ∂‚ØÖ‚ØÜ‚ñ≤‚ñº‚ØÅ ‚óè¬ª‚Ä∫‚ñ∫‚ñª‚ñ∏‚ñπ√ó
prompt_symbol="\$"
prompt_git_color=green
prompt_success_color=blue
prompt_failure_color=red
prompt_failure_symbol="√ó"

setopt prompt_subst

ansi() {
  echo -n "%F{$1}$2%f"
}

::prompt_current_dir() {
  echo -n "%~"
}

::prompt_return_status() {
  echo -n "%B%(?.%F{$prompt_success_color}$prompt_symbol.%F{$prompt_failure_color}$prompt_failure_symbol)%b%f"
}

::prompt_time() { # from https://github.com/sindresorhus/pretty-time-zsh
  local seconds d h m s
  local -a human=()
  seconds=$1
  d=$(( seconds / 60 / 60 / 24 ))
  h=$(( seconds / 60 / 60 % 24 ))
  m=$(( seconds / 60 % 60 ))
  s=$(( seconds % 60 ))

  (( d > 0 )) && human+="${d}d" && : ${color:=${GEOMETRY_TIME_COLOR_LONG:-red}}
  (( h > 0 )) && human+="${h}h" && : ${color:=${GEOMETRY_TIME_COLOR_NEUTRAL:-default}}
  (( m > 0 )) && human+="${m}m"
  (( s > 0 )) && human+="${s}s" && : ${color:=${GEOMETRY_TIME_COLOR_SHORT:-green}}

  ${2:-false} && echo ${(j: :)human} || echo " $human[1]"
}

::prompt_git_branch() { # branch name
  git rev-parse 2>/dev/null || return
  git rev-parse --abbrev-ref HEAD 2>/dev/null
}

::prompt_git_status() { # dirty or clean status
  git rev-parse 2>/dev/null || return
  if [[ -z "$(git status --porcelain --ignore-submodules)" ]]; then
    ansi green "‚¨¢"
  else
    ansi green "‚¨°"
  fi
}

::prompt_git_modified() { # count of dirty files
  git rev-parse 2>/dev/null || return
  local modified; modified="$(git status --porcelain --ignore-submodules | wc -l)"
  if [ $modified -gt 0 ]; then
    ansi grey " +$modified"
  fi
}

::prompt_git_time() { # time since last commit
  git rev-parse 2>/dev/null || return
  local last_commit; last_commit=$(git log -1 --pretty=format:'%at' 2>/dev/null)
  [[ -z "$last_commit" ]] && return
  local now; now=$(date +%s)
  local seconds_since_last_commit; seconds_since_last_commit=$((now - last_commit))
  ansi cyan "$(::prompt_time $seconds_since_last_commit)"
}

PCMD() {
  echo "$(::prompt_current_dir) $(::prompt_return_status) "
}

RCMD() { # non-blocking
  echo "$(::prompt_git_branch)$(::prompt_git_time)$(::prompt_git_modified)$(ansi blue "$prompt_cmd_elapsed")"
}

PROMPT='$(PCMD)'
RPROMPT=''

# ;; aliases

alias v='nvim'
alias hh='hori-hori'
alias hc='herbstclient'

alias please='sudo'

# ls
alias ls='ls -F --color=auto'
alias l='ls'
alias sl='ls'
alias la='ls -A'
alias ll='ls -lA'
alias l.='ls -A | egrep "^\."'

# cd
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# ask for confirmation
alias cp="cp -iv"
alias mv='mv -iv'
alias rm='rm -iv'

function gasp() { # easy git push in one command
  git add -A && git commit -v && git push
}

function cd() { # ls after cd except when going back to ~
  builtin cd "$@"
  [ ! "$(pwd)" = "$HOME" ] && la --group-directories-first || return 0
}

# ;; completion

# compile zcompdump in the background once a day
autoload -Uz compinit
{ setopt extendedglob
  for zcompdump in $HOME/.zcompdump(#qN.m1); do
    if [[ -s "$zcompdump" && (! -s "${zcompdump}.zwc" || "$zcompdump" -nt "${zcompdump}.zwc") ]]; then
      zcompile "$zcompdump"
    fi
  done
  unsetopt extendedglob
} &!
compinit -C

# completion for hori-hori
compdef '_path_files -/ -W /home/sean/.garden/etc/' hori-hori

# ;; plugins

# fzf completion
if [ -d "$HOME/.config/zsh-fzf-compe" ]; then
  source $HOME/.config/zsh-fzf-compe/fzf-tab.plugin.zsh
  zstyle ':fzf-tab:*' fzf-flags "--info=hidden"
else
  git clone https://github.com/Aloxaf/fzf-tab "$HOME/.config/zsh-fzf-compe"
fi

# z.lua
if [ -d "$HOME/.config/z-lua" ]; then
  export _ZL_DATA="$HOME/.local/.zlua"
  export _ZL_FZF_FLAG="--no-sort --info=hidden --bind tab:down --bind shift-tab:up --bind change:first --cycle"
  eval "$(lua "$HOME/.config/z-lua/z.lua" --init zsh fzf)"

  function n() {
    dir="$(z -l "$@" | \
      while read -r frecency line; do
        echo "${line/$HOME/~}"
      done | fzf \
        --prompt="z " \
        --reverse \
        --cycle \
        --height 35% \
        --no-sort --info=hidden \
        --bind tab:down \
        --bind shift-tab:up \
        --bind change:first)"
    dir="${dir/\~/$HOME}"
    [ -n "$dir" ] && cd "$dir"
  }

  alias zb="z -b"
else
  git clone https://github.com/skywind3000/z.lua "$HOME/.config/z-lua"
fi


# ;; gripes and grievances

export LESSHISTSIZE=0 # prevent ~/.lesshst
zle_highlight[(r)suffix:*]="suffix:fg=foreground" # remove that annoying bold slash at the end of paths









#_fzf() {
#  fzf --layout=reverse --height=30% --info=hidden --query="$1" \
#    --bind tab:down --bind shift-tab:up --bind change:first
#}
#
## TODO
## but what about that plugin?
## disable fucking vim mode or AT least make it more visible
#
#_fzf_complete_man(){ # manpages in neovim
#  local pre="$1"
#  local name section dash description
#  local matches=($(man -k . | _fzf "$pre" | while read -r name section dash description; do
#    echo "${name}${section}"
#  done))
#  zle reset-prompt
#  if [ -z "$matches" ]; then
#    return 0
#  else
#    LBUFFER="nvim -c ':Man $matches | only'"
#    zle accept-line
#  fi
#}
#
## {{{
### To use custom commands instead of find, override _fzf_compgen_{path,dir}
##if ! declare -f _fzf_compgen_path > /dev/null; then
##  _fzf_compgen_path() {
##    echo "$1"
##    command find -L "$1" \
##      -name .git -prune -o -name .hg -prune -o -name .svn -prune -o \( -type d -o -type f -o -type l \) \
##      -a -not -path "$1" -print 2> /dev/null | sed 's@^\./@@'
##  }
##fi
##
##if ! declare -f _fzf_compgen_dir > /dev/null; then
##  _fzf_compgen_dir() {
##    command find -L "$1" \
##      -name .git -prune -o -name .hg -prune -o -name .svn -prune -o -type d \
##      -a -not -path "$1" -print 2> /dev/null | sed 's@^\./@@'
##  }
##fi
##
##__fzf_comprun() {
##  if [[ "$(type _fzf_comprun 2>&1)" =~ function ]]; then
##    _fzf_comprun "$@"
##  elif [ -n "$TMUX_PANE" ] && { [ "${FZF_TMUX:-0}" != 0 ] || [ -n "$FZF_TMUX_OPTS" ]; }; then
##    shift
##    if [ -n "$FZF_TMUX_OPTS" ]; then
##      fzf-tmux ${(Q)${(Z+n+)FZF_TMUX_OPTS}} -- "$@"
##    else
##      fzf-tmux -d ${FZF_TMUX_HEIGHT:-40%} -- "$@"
##    fi
##  else
##    shift
##    fzf "$@"
##  fi
##}
##
##__fzf_extract_command() {
##  local token tokens
##  tokens=(${(z)1})
##  for token in $tokens; do
##    token=${(Q)token}
##    if [[ "$token" =~ [[:alnum:]] && ! "$token" =~ "=" ]]; then
##      echo "$token"
##      return
##    fi
##  done
##  echo "${tokens[1]}"
##}
##
##__fzf_generic_path_completion() {
##  local base lbuf cmd compgen fzf_opts suffix tail dir leftover matches
##  base=$1
##  lbuf=$2
##  cmd=$(__fzf_extract_command "$lbuf")
##  compgen=$3
##  fzf_opts=$4
##  suffix=$5
##  tail=$6
##
##  setopt localoptions nonomatch
##  eval "base=$base"
##  [[ $base = *"/"* ]] && dir="$base"
##  while [ 1 ]; do
##    if [[ -z "$dir" || -d ${dir} ]]; then
##      leftover=${base/#"$dir"}
##      leftover=${leftover/#\/}
##      [ -z "$dir" ] && dir='.'
##      [ "$dir" != "/" ] && dir="${dir/%\//}"
##      matches=$(eval "$compgen $(printf %q "$dir")" | FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse --bind=ctrl-z:ignore $FZF_DEFAULT_OPTS $FZF_COMPLETION_OPTS" __fzf_comprun "$cmd" ${(Q)${(Z+n+)fzf_opts}} -q "$leftover" | while read item; do
##        echo -n "${(q)item}$suffix "
##      done)
##      matches=${matches% }
##      if [ -n "$matches" ]; then
##        LBUFFER="$lbuf$matches$tail"
##      fi
##      zle reset-prompt
##      break
##    fi
##    dir=$(dirname "$dir")
##    dir=${dir%/}/
##  done
##}
##_fzf_path_completion() {
##  __fzf_generic_path_completion "$1" "$2" _fzf_compgen_path \
##    "-m" "" " "
##}
##_fzf_dir_completion() {
##  __fzf_generic_path_completion "$1" "$2" _fzf_compgen_dir \
##    "" "/" ""
##}
## }}}
#
#fzf-compe() {
#  local lbuf pre cmd
#  setopt localoptions noshwordsplit noksh_arrays noposixbuiltins
#  tokens=(${(z)LBUFFER})
#
#  [ ${#tokens} -lt 1 ] && return
#  # abort if buffer is empty
#
#  # allow space to be a prefix
#  [ ${LBUFFER[-1]} = ' ' ] && tokens+=("")
#
#  cmd=${tokens[1]}
#  pre=${tokens[-1]}
#  lbu=$LBUFFER
#
#  # complete specific commands
#  # cmd pre|<tab>
#  if type _fzf_complete_${cmd} > /dev/null; then
#    _fzf_complete_${cmd} ${pre}
#  # complete commands
#  # cm|<tab>
#  elif [ "$cmd" = "$pre" ]; then
#    echo
#    echo "complete commands"
#    echo "cmd: $cmd"
#    echo "pre: $pre"
#  # complete paths
#  # cmd |<tab>
#  elif [ -n "$cmd" ] && [ -z "$pre" ]; then
#    echo
#    echo "complete paths"
#    echo "cmd: $cmd"
#    echo "pre: $pre"
#    #zle expand-or-complete # default fallback
#  # complete stuff that wasn't assigned specifically
#  # just paths too?
#  # cmd pre|<tab>
#
#  # also:
#  # cmd -|<tab> get cli options... somehow
#
#  else
#    echo
#    echo "complete paths"
#    echo "cmd: $cmd"
#    echo "pre: $pre"
#    #_fzf_path_completion "$pre" "$lbu"
#  fi
#}
#
#zle -N fzf-compe
#bindkey '^I' fzf-compe

#
## setopts



#setopt append_history hist_ignore_all_dups hist_ignore_space hist_reduce_blanks share_history

## prompt
#__prompt_symbol="√ó"
#‚ñë‚ñë‚ñí‚ñí‚ñì‚ñì‚ñà‚ñà
#‚ùØ‚óÜ¬ª‚Ä∫‚ûú ‚û§ ‚ñ∫ ‚ñª ‚ñ∏ ‚ñπ ‚ùØ √ó
#__prompt_success_color=blue
#__prompt_failure_color=red

#::prompt::current_dir() {
#  echo -n "%~"
#}
#
#::prompt::return_status() {
#  echo -n "%B%(?.%F{$__prompt_success_color}.%F{$__prompt_failure_color})$__prompt_symbol%b%f"
#}

#::prompt::git_status() {
#  if [[ "$(git status --porcelain 2>/dev/null)" != "" ]] ; then
#    echo -n "%F{$__prompt_success_color}$(git rev-parse --abbrev-ref HEAD 2> /dev/null)%f"
#    MODIFIED=$(git status --short | wc -l)
#    if [ $MODIFIED -gt 0 ]; then
#      echo -n "+$MODIFIED"
#    fi
#  fi
#}


#PROMPT='$(::prompt::current_dir) $(::prompt::return_status) '
#RPROMPT='$(::prompt::git_status)'

## aliases
#alias yt-dl-best='youtube-dl -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best"'

#alias rrsh='curl -s -L https://raw.githubusercontent.com/keroserene/rickrollrc/master/roll.sh | bash'
#alias font-grep='fc-list | grep'

## probably a bad idea
##sudo() { [ "$1" = "v" ] && sudoedit "$2" || command sudo "$@" ; }

## TODO make this always create a new directory
#ex() {
#  if [ -f $1 ]; then
#    case $1 in
#      *.tar.bz2) tar xjf $1    ;;
#      *.tar.gz)  tar xzf $1    ;;
#      *.bz2)     bunzip2 $1    ;;
#      *.rar)     unrar x $1    ;;
#      *.gz)      gunzip $1     ;;
#      *.tar)     tar xf $1     ;;
#      *.tbz2)    tar xjf $1    ;;
#      *.tgz)     tar xzf $1    ;;
#      *.zip)     unzip $1      ;;
#      *.Z)       uncompress $1 ;;
#      *.7z)      7z x $1       ;;
#      *.deb)     ar x $1       ;;
#      *.tar.xz)  tar xf $1     ;;
#      *.tar.zst) unzstd $1     ;;
#      *) echo "'$1' cannot be extracted via ex()" ;;
#    esac
#  else
#    echo "'$1' is not a valid file"
#  fi
#}
#
#new-bash-script() {
#  touch "$1"
#  echo "#!/bin/bash" > "$1"
#  chmod +x "$1"
#}
#
## git push via $EDITOR

#function gp() {
#  if [ -z "$BUFFER" ]; then
#    BUFFER="git add -A && git commit -v && git push"
#  fi
#  zle accept-line # <cr>
#}


#zle -N gp
#bindkey "^g" gp
#
## simple fuzzy history
#::fuzzy_history() {
#  local output
#  output=$( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | tail --lines 1000 | awk '{ $1=""; print substr($0,2) }' | fzf --tac --no-sort --height "15" --no-info --reverse --bind=up:down,down:up)
#  echo "$output"
#}
#
#::fuzzy_history::keybind() {
#  local output
#  output="$(::fuzzy_history)"
#  zle reset-prompt
#  if [ ! "$output" = "" ]; then
#    BUFFER=""             # clear whatever is on the line
#    LBUFFER+="${output}"  # append selection from fzf
#  fi
#  return 0
#}
#
##hh() {
##  local output
##  output="$(::fuzzy_history)"
##  if [ ! "$output" = "" ]; then
##    print -z "$output"
##  fi
##  return 0
##}
#zle -N ::fuzzy_history::keybind
#bindkey "^[[A" ::fuzzy_history::keybind
#
##function zle-line-init zle-keymap-select {
##  zle reset-prompt
##}
##
### zle -N zle-line-init
##zle -N zle-keymap-select
##
##bindkey -v
##
##bindkey '^k' vi-cmd-mode # <C-k> for going to command mode
##
##bindkey -M vicmd ' ' execute-named-cmd # Space for command line mode
##
### Home key variants
##bindkey '\e[1~' vi-beginning-of-line
##bindkey '\eOH' vi-beginning-of-line
##
### End key variants
##bindkey '\e[4~' vi-end-of-line
##bindkey '\eOF' vi-end-of-line
##
##bindkey -M viins '^o' vi-backward-kill-word
##
##bindkey -M vicmd 'yy' vi-yank-whole-line
##bindkey -M vicmd 'Y' vi-yank-eol
##
##bindkey -M vicmd 'y.' vi-yank-whole-line
##bindkey -M vicmd 'c.' vi-change-whole-line
##bindkey -M vicmd 'd.' kill-whole-line
##
##bindkey -M vicmd 'u' undo
##bindkey -M vicmd 'U' redo
##
##bindkey -M vicmd 'H' run-help
##bindkey -M viins '\eh' run-help
##
##bindkey -M vicmd 'k' history-substring-search-up
##bindkey -M vicmd 'j' history-substring-search-down
##
##bindkey '^p' history-substring-search-up
##bindkey '^n' history-substring-search-down
##
##bindkey -M vicmd '\-' vi-repeat-find
##bindkey -M vicmd '_' vi-rev-repeat-find
##
##bindkey -M viins '\e.' insert-last-word
##bindkey -M vicmd '\e.' insert-last-word
##
##bindkey -M viins '^a' beginning-of-line
##bindkey -M viins '^e' end-of-line
##
### if mode indicator wasn't setup by theme, define default
##if [[ "$MODE_INDICATOR" == "" ]]; then
##  MODE_INDICATOR="%{$fg_bold[red]%}<%{$fg[red]%}<<%{$reset_color%}"
##fi
##
##function vi_mode_prompt_info() {
##  echo "${${KEYMAP/vicmd/$MODE_INDICATOR}/(main|viins)/}"
##}
#
## define right prompt, if it wasn't defined by a theme
##RPS1='$(vi_mode_prompt_info)'
##KEYTIMEOUT=0

preexec() {
  prompt_cmd_start=$(date +%s)
}

ASYNC_PROC=0
function precmd() { # executed before each prompt
  # setup cmd time tracking
  if [ $prompt_cmd_start ]; then
    local now; now=$(date +%s)
    local delta; delta=$(($now - $prompt_cmd_start))
    if (( delta > 5 )); then
      prompt_cmd_elapsed="$(::prompt_time delta)"
    else
      prompt_cmd_elapsed=""
    fi
    unset prompt_cmd_start
  else
    unset prompt_cmd_elapsed
  fi

  function async() {
    printf "%s" "$(RCMD)" > "/tmp/zsh_prompt_$$" # save to temp file
    kill -s USR1 $$ # signal parent
  }

  # do not clear RPROMPT, let it persist
  # kill child if necessary
  if [[ "${ASYNC_PROC}" != 0 ]]; then
    kill -s HUP $ASYNC_PROC >/dev/null 2>&1 || :
  fi
  # start background computation
  async &!
  ASYNC_PROC=$!
}

function TRAPUSR1() {
  RPROMPT="$(cat /tmp/zsh_prompt_$$)" # read from temp file
  ASYNC_PROC=0 # reset proc number
  zle && zle reset-prompt # redisplay
}
