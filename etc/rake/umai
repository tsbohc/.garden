#!/usr/bin/env lua
local M = {data = require("config")}
local function escape(s)
  local function _0_(c)
    return ("%" .. c)
  end
  return s:gsub("[%(%)%.%%%+%-%*%?%[%]%^%$]", _0_)
end
local lexis = {["e-l"] = "{", ["e-r"] = "}", ["s-l"] = "{% ", ["s-r"] = " %}"}
lexis["statement-re"] = ("(" .. escape(lexis["s-l"]) .. ".-" .. escape(lexis["s-r"]) .. ")")
lexis["expression-re"] = (escape(lexis["e-l"]) .. "([%w._%-]+)" .. escape(lexis["e-r"]))
local function dp_xs(dp)
  local ks = {}
  for w in dp:gmatch("[%w_]+") do
    table.insert(ks, w)
  end
  return ks
end
local function get_in(xt, ks)
  local x = xt
  while ((#ks > 0) and (x ~= nil)) do
    do
      local t_0_ = x
      if (nil ~= t_0_) then
        t_0_ = (t_0_)[ks[1]]
      end
      x = t_0_
    end
    table.remove(ks, 1)
  end
  return x
end
local function get_dp(xt, dp)
  local ks = dp_xs(dp)
  return get_in(xt, ks)
end
local function parse(s)
  local s0 = s
  local done_3f = false
  local xs = {}
  while not done_3f do
    local x, y = s0:find(lexis["statement-re"])
    if (nil ~= x) then
      table.insert(xs, s0:sub(1, (x - 1)))
      table.insert(xs, s0:sub(x, y))
      s0 = s0:sub((y + 1))
    end
    if (nil == x) then
      done_3f = true
    end
  end
  if (#s0 > 0) then
    table.insert(xs, s0)
  end
  return xs
end
local function inject(s)
  if s:find(lexis["expression-re"]) then
    local function _0_()
      local key = s:match(lexis["expression-re"])
      local val = get_dp(M.data, key)
      local l = escape(lexis["e-l"])
      local r = escape(lexis["e-r"])
      return s:gsub((l .. key .. r), val)
    end
    return inject(_0_())
  else
    return s
  end
end
local function render(xs)
  local rendered = {}
  for _, s in ipairs(xs) do
    if s:find(lexis["statement-re"]) then
      local s0 = s:sub(((lexis["s-l"]):len() + 1), (-1 * ((lexis["s-r"]):len() + 1)))
      local r = inject(s0)
      table.insert(rendered, r)
    else
      table.insert(rendered, s)
    end
  end
  return table.concat(rendered)
end
print(render(parse(arg[1])))
return M
