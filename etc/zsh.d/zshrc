#     ___
#   (,   )      /
#       /  _   /_  __  _.
#     _/_ /_)_/ /_/ (_(__
#  )   /
# (__ /
#

export NNN_FCOLORS='c1e20c0a00600ef7c6d6abc4'

# ------------------------------
#            prompt
# ------------------------------

# TODO shove those into an array

__prompt_symbol="◆ "
__prompt_success_color=blue
__prompt_failure_color=magenta

# {{{
::prompt::current_dir() {
  echo -n "%B%~%b"
}

::prompt::return_status() {
  echo -n "%B%(?.%F{$__prompt_success_color}.%F{$__prompt_failure_color})$__prompt_symbol%b%f"
}

::prompt::git_status() {
  if [[ "$(git status --porcelain 2>/dev/null)" != "" ]] ; then
    echo -n ", %B%F{$__prompt_success_color}$(git rev-parse --abbrev-ref HEAD 2> /dev/null)%f"
    MODIFIED=$(git status --short | wc -l)
    if [ $MODIFIED -gt 0 ]; then
      echo -n "+$MODIFIED%b"
    fi
  fi
}

PROMPT='$(::prompt::current_dir)$(::prompt::git_status) $(::prompt::return_status)'
# }}}

# ------------------------------
#            plugins
# ------------------------------

source ~/.zinit/bin/zinit.zsh

#zinit light b4b4r07/enhancd
zinit light Aloxaf/fzf-tab
zinit light zdharma/fast-syntax-highlighting
#zinit light zsh-users/zsh-autosuggestions
#zinit light changyuheng/zsh-interactive-cd # added margin

# ------------------------------
#           settings
# ------------------------------

autoload -Uz compinit ; compinit # completion

zstyle ':completion:*:functions' ignored-patterns '::*'
zstyle ':completion:*:functions' ignored-patterns '_*' # don't auto-complete internal functions (ones prefixed with _)

compinit -i

setopt auto_cd                   # cd into directories if only path is given
setopt no_case_glob              # case-insensitive globbing
setopt hist_ignore_space         # [ ]print -s to history
#unsetopt menu_complete
#setopt auto_menu

#zstyle ':completion:*' insert-tab false

setopt prompt_subst              # support $() in prompt

setopt no_auto_menu
setopt no_menu_complete

unsetopt beep

# history
HISTFILE=~/.cache/histfile
HISTSIZE=1000
SAVEHIST=$HISTSIZE
setopt append_history hist_ignore_all_dups hist_ignore_space hist_reduce_blanks share_history

# remove that annoying bold slash at the end of paths
zle_highlight[(r)suffix:*]="suffix:fg=foreground"

export FZF_DEFAULT_OPTS='--color=bg:-1,bg+:-1,hl:15,hl+:15,fg:7,fg+:7,info:7,prompt:7,pointer:4,header:15 --margin=0,2 --pointer="◇" --prompt="  "'

# ------------------------------
#            vi-mode
# ------------------------------

export KEYTIMEOUT=1 # make mode switching in vi mode quicker
# {{{ cursor shape for prompt vi modes
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}
zle -N zle-keymap-select
zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.
# }}}

# ------------------------------
#            aliases
# ------------------------------

alias b='source ~/src/3lantern/zsh_lantern'

alias yt-dl-best='youtube-dl -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best"'

alias v='nvim'
alias :q='exit'
alias :qw='exit'
alias :q!='exit'
alias please='sudo'

# ls
alias ls='ls -F --color=auto'
alias sl='ls'
alias la='ls -A'
alias ll='ls -lA'
alias l.='ls -A | egrep "^\."'
alias l='ls'

# cd
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

# ask for confirmation
alias cp="cp -iv"
alias mv='mv -iv'
alias rm='rm -iv'

alias rrsh='curl -s -L https://raw.githubusercontent.com/keroserene/rickrollrc/master/roll.sh | bash'
alias font-grep='fc-list | grep'

# probably a bad idea
#sudo() { [ "$1" = "v" ] && sudoedit "$2" || command sudo "$@" ; }

# ls after cd except when going back to ~
cd() {
  builtin cd "$@"
  [ ! "$(pwd)" = "$HOME" ] && la --group-directories-first || return 0
}

# nvim as manpage viewer
m() { man "$1" | nvim -u ~/src/pager.vim ; }

ex() {
  if [ -f $1 ]; then
    case $1 in
      *.tar.bz2) tar xjf $1    ;;
      *.tar.gz)  tar xzf $1    ;;
      *.bz2)     bunzip2 $1    ;;
      *.rar)     unrar x $1    ;;
      *.gz)      gunzip $1     ;;
      *.tar)     tar xf $1     ;;
      *.tbz2)    tar xjf $1    ;;
      *.tgz)     tar xzf $1    ;;
      *.zip)     unzip $1      ;;
      *.Z)       uncompress $1 ;;
      *.7z)      7z x $1       ;;
      *.deb)     ar x $1       ;;
      *.tar.xz)  tar xf $1     ;;
      *.tar.zst) unzstd $1     ;;
      *) echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

new-bash-script() {
  touch "$1"
  echo "#!/bin/bash" > "$1"
  chmod +x "$1"
}

# git push via $EDITOR
# {{{
function gp() {
  if [ -z "$BUFFER" ]; then
    BUFFER="git add -A && git commit -v && git push"
  else
    BUFFER="git add -A && git commit -m \"$BUFFER\" && git push"
  fi
  zle accept-line # <cr>
}
# }}}
zle -N gp
bindkey "^g" gp

# simple fuzzy history
# {{{
::fuzzy_history() {
  local output
  output=$( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | tail --lines 200 | awk '{ $1=""; print substr($0,2) }' | fzf --tac --no-sort --height "15" --no-info --reverse --bind=up:down,down:up)
  echo "$output"
}

::fuzzy_history::keybind() {
  local output
  output="$(::fuzzy_history)"
  zle reset-prompt
  if [ ! "$output" = "" ]; then
    BUFFER=""             # clear whatever is on the line
    LBUFFER+="${output}"  # append selection from fzf
  fi
  return 0
}

hh() {
  local output
  output="$(::fuzzy_history)"
  if [ ! "$output" = "" ]; then
    print -z "$output"
  fi
  return 0
}
# }}}
zle -N ::fuzzy_history::keybind
bindkey "^[[A" ::fuzzy_history::keybind

# ------------------------------
#       coloured manpages
# ------------------------------

export LESS_TERMCAP_mb=$'\e[01;31m'       # begin blinking
export LESS_TERMCAP_md=$'\e[01;93m'       # begin bold

export LESS_TERMCAP_so=$'\e[30;47m'       # info box / search highlighting
export LESS_TERMCAP_se=$'\e[0m'           # end standout-mode

export LESS_TERMCAP_us=$'\e[38;5;255;2m'  # begin underline
export LESS_TERMCAP_ue=$'\e[0m'           # end underline

export LESS_TERMCAP_me=$'\e[0m'           # end mode
