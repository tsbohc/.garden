#!/bin/bash

# kernel
#uname -r

calc() { echo $(awk "BEGIN{print $*}") ; }
round() { echo $(echo $1 | awk '{ printf("%d", $1 + 0.5) }') ; }

_greeting() { echo "$(hostname)" ; }

_distro() { cat /etc/arch-release ; }

_term() { echo "$TERM-${SHELL/'/bin/'/''}" ; }

_packages() { echo "$(pacman -Q | wc -l) packages" ; }

echo_color() {
  local code="$1"
  local icon=${2:-'██'}
  if (( code < 8 )); then
    code=$((30 + $code))
  else
    code=$((82 + $code))
  fi
  echo -en "\e[${code}m${icon}\e[0m"
}

ui_bar() { # $1 - percentage, $2 - length, $3 - color
  local bar
  local progress=$(round $(calc $1/$2))
  echo -ne "\e[92m"
  for i in $(seq 0 $2); do
    if (( $i < $progress )); then
      bar+='━'
    elif (( $i == $progress )); then
      bar+='━\e[37m\e[2m'
    else
      bar+='─'
    fi
  done
  echo -en " $bar\e[0m"
}

_storage() {
  local data
  data="$(df -t ext4 | tail -1)"
  # FIXME only works for sda and sets every tag to whatever it gets
  if cat /sys/block/sda/queue/rotational >/dev/null; then
    local tag='ssd'
  else
    local tag='hdd'
  fi
  while read -r disk total used free percentage mounted; do
    ui_bar "${percentage:0:-1}" 16
    #echo " $mounted $(round $(calc $free/1048576))gb free"
    #echo " $(round $(calc $used/1048576))/$(round $(calc $total/1048576))gb $mounted"
    echo " $tag $(round $(calc $used/1048576))gb $mounted"
  done <<< "$data"
}

_system() {
  local cpu_load=$(top -d 0.5 -b -n2 | grep "Cpu(s)"| tail -n 1 | awk '{print $2 + $4}')
  local cpu_temp=$(sensors | awk '/^Tdie/ {print $2}')
  [[ "$cpu_temp" == "" ]] && cpu_temp=$(round $(sensors | awk '/^Core 0:/ {print $3}'))
  ui_bar $cpu_load 16
  echo " cpu $cpu_load% ${cpu_temp}C"

  #ui_bar "$cpu_temp" 19
  #echo " tem $(round ${cpu_temp})C"

  local ram_load=$(free -h | grep Mem | awk '{print $3}')
  local ram_percentage=$(round $(free | grep Mem | awk '{print $3/$2 * 100}'))
  ui_bar "$ram_percentage" 16
  echo " ram $ram_load"
}

_connection() {
  #echo -en ' connection: '
  if ping -q -c 1 -w 1 google.com >/dev/null 2>&1; then
    echo 'online'
  else
    echo 'offline'
  fi
}

echo

for i in {1..4}; do
  echo -n ' '
  for j in 1 3 2 6 4 5; do
    case $i in
      1) echo_color "$(($j+8))" ;;
      2) echo_color "$(($j+8))" "$(($j+82))" ;;
      3) echo_color "$j" ;;
      4) echo_color "$j" "$(($j+30))" ;;
    esac
    echo -n ' '
  done
  case $i in
    1) _distro ;;
    2) _packages ;;
    3) _term ;;
    4) _connection ;;
  esac
done

echo
_storage
_system

echo


