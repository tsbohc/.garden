#!/bin/bash

# soap.sh -- the modular dotfiles management bash lib

# {{{
# TODO
# --clean opt that will clean up inactive bars

# get fzf menu if no profile name is given
# hook selection with fzf multiselect
# + dir to midir
# check if sudo is needed by looking for sudo in hooks? but i can't really check all function bodies can I? what if hooks with names containig "sudo" will flag forasksudo

  #log "$magenta$boldλ$escape $profile" "profile"
  #echo -e "$_1$bold[$escape $bold${!profile}$escape $_1$bold]$escape"
  #echo
  # TODO give overview of the profile here, active inactive bars
# }}}

# ------------------------------
#            helpers
# ------------------------------

script_path="$(cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P)"

# {{{
# colors
black="\e[30m"
red="\e[31m"
green="\e[32m"
yellow="\e[33m"
blue="\e[34m"
magenta="\e[35m"
cyan="\e[36m"
gray="\e[90m"

bold="\e[1m"

escape="\e[0m"
# }}}

# {{{
welcome() {
  echo -e "
  ____    ___      __     _____     
 /',__\  / __'\  /'__'\  /\ '__'\   
/\__, '\/\ \L\ \/\ \L\.\_\ \ \L\ \  
\/\____/\ \____/\ \__/.\_\  \ ,__/  
 \/___/  \/___/  \/__/\/_/ \ \ \/   
                            \ \_\   
                             \/_/  "
}
# }}}

# {{{
get_abspath() {
  echo "$(realpath -m --no-symlinks ${1/"~"/$HOME})" 
}
# }}}

# {{{
get_cpos() {
  exec < /dev/tty
  oldstty=$(stty -g)
  stty raw -echo min 0
  echo -en "\033[6n" > /dev/tty
  IFS=';' read -r -d R -a pos
  stty $oldstty
  # change from one-based to zero based so they work with: tput cup $row $col
  row=$((${pos[0]:2} - 1))    # strip off the esc-[
  col=$((${pos[1]} - 1))
  echo $row
}
# }}}

# {{{
log_bar() {
  echo -e "$_current_color$bold[$escape $bold$1$escape $_current_color$bold]$escape"
}
# }}}

# {{{
log() {
  echo -e "$1 $gray$2$escape"
}
# }}}

_link="$bold•$escape"
_hook="$boldλ$escape"
_comm="$bold#$escape"

_1="$blue"
_0="$magenta"
_err="$red"

_current_color=""
_current_icon=""
_current_status=""

# {{{
bar() {
  (( "$#" == 0 )) && return
  name="$1" ; shift
  declare -g $name="$*"
  bars+=("$name")
}
# }}}

# {{{
tub() {
  (( "$#" == 0 )) && return
  name="$1" ; shift
  declare -g $name="$@"
  tubs+=("$name")
}
# }}}

# {{{
exe() {
  [[ "$_current_status" != "1" ]] && return
  _current_icon="$_hook"

  local out cmd arg
  cmd="$1"
  arg="$2"
  out=""

  log "$gray$_current_icon$escape $cmd" ":: $arg"
  out_start_col=$(get_cpos)

  $cmd $arg | while read -r l; do
    out+=$'\n'"$l"
    tput cup "$out_start_col" 0 && tput ed
    echo -e "$out" | tail -n+2 | tail -n 10
  done

  st="${PIPESTATUS[0]}"

  out_end_col=$(get_cpos)
  tput cup "$((out_start_col-1))" 0
  if [[ "$st" == "0" ]]; then
    log "$_current_color$_current_icon$escape $cmd" ":: $arg"
    tput ed
  else
    log "$_err$_current_icon$escape $cmd" ":: $arg"
    tput cup "$out_end_col" 0
  fi
}
# }}}

# {{{
symlink() {
  _current_icon="$_link"
  local from to a_from a_to
  from="$1"
  to="$2"
  a_from="$script_path/$from"
  a_to="$(get_abspath "$to")"


  if [[ "$_current_status" == "1" ]]; then

    log "$gray$_current_icon$escape $(basename $from)" "-> $to"
    out_start_col="$(get_cpos)"
    out_start_col="$((out_start_col-1))"

    # source missing
    if [[ ! -e "$a_from" ]]; then
      tput cup "$out_start_col" 0
      log "$_err$_current_icon$escape $(basename $from)" "-> $to"
      log "  ${a_from/$HOME/\~}" "not found !"
      return 1
    fi

    # destination exists
    if [[ -e "$a_to" ]]; then
      # destination is a symlink
      if [[ -L "$a_to" ]]; then
        # linked to source
        if [[ "$(readlink "$a_to")" == "$a_from" ]]; then
          tput cup "$out_start_col" 0
          log "$_current_color$_current_icon$escape $(basename $from)" "-> $to"
          return 0
        # not linked to source
        else
          ln -sfn "$a_from" "$a_to"
          tput cup "$out_start_col" 0
          log "$_current_color$_current_icon$escape $(basename $from)" "-> $to"
          return 0
        fi
      # destination is not a symlink
      else
        tput cup "$out_start_col" 0
        log "$_err$_current_icon$escape $(basename $from)" "-> $to"
        log "  ${a_to/$HOME/\~}" "already exists !"
        return 1
      fi
    # all clear
    else
      ln -s "$a_from" "$a_to"
      tput cup "$out_start_col" 0
      log "$_current_color$_current_icon$escape $(basename $from)" "-> $to"
    fi

  # reverse
  else
    #log "$gray$_current_icon$escape ${a_to/$HOME/\~}" ">/dev/null"
    out_start_col="$(get_cpos)"
    if [[ -e "$a_to" ]]; then
      if [[ -L "$a_to" ]]; then
        if [[ "$(readlink "$a_to")" == "$a_from" ]]; then
          rm -f "$a_to"
          tput cup "$out_start_col" 0
          log "$_current_color$_current_icon$escape ${a_to/$HOME/\~}" ">/dev/null"
          return 0
        fi
      fi
    else
      tput cup "$out_start_col" 0
      #log "$_current_color$_current_icon$escape ${a_to/$HOME/\~}" ">/dev/null"
      return 0
    fi
  fi
}
# }}}

# {{{
parse() { # $1 - line, $2 - is_active
  local regex_link="(\S*)[[:blank:]]+->[[:blank:]]+(\S*)"
  local regex_hook="(.*)[[:blank:]]+::[[:blank:]]*(.*)"
  local regex_comment="^#\s*(.*)"

  if [[ "$1" =~ $regex_comment ]]; then
    _current_icon="$_comm"
    comment="${BASH_REMATCH[1]}"
    #echo -e "$_current_color$_comm$escape $comment$escape"
  elif [[ "$1" =~ $regex_link ]]; then
    symlink "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
  elif [[ "$1" =~ $regex_hook ]]; then
    exe "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
  fi
}
# }}}

# {{{
soap() { # $1 - profile name
  clear
  #welcome
  local profile="$1"

  for bar in "${bars[@]}"; do
    if [[ "${!profile}" =~ "$bar" ]]; then
      _current_color="$_1"
      _current_status="1"
    else
      _current_color="$_0"
      _current_status="0"
    fi

    log_bar "$bar"
    while read -r l; do
      parse "$l"
    done <<< "${!bar}"
    echo
  done
}
# }}}

# ------------------------------
#             hooks
# ------------------------------

# force -Syu?
# {{{
pkg() {
  local packages
  local missing_packages

  packages=($@)

  for package in "${packages[@]}"; do
    ! yay -Qi "$package" >/dev/null 2>&1 && missing_packages+=($package)
  done

  if [[ "${#missing_packages[@]}" != "0" ]]; then
    echo -e "installing $gray${missing_packages[@]}$escape"
    yay -S --noconfirm "${missing_packages[@]}"
  fi

  [[ $? -eq 0 ]] && return 0 || return 1
}
# }}}

# {{{
pypkg() {
  echo "called pypkg()"
}
# }}}

# ------------------------------
#            config
# ------------------------------

bar base "
pkg :: xorg-server xorg-xinit xorg-xsetroot xterm xtitle xdo xdotool
etc/xorg.d/xinitrc                 -> ~/.xinitrc
etc/xorg.d/xresources.d/xresources -> ~/.Xresources

pkg :: pulseaudio pulseaudio-alsa alsa-utils
pkg :: wmctrl wmutils

pkg :: picom
etc/picom               -> ~/.config/picom.conf

pkg :: polybar
etc/polybar.d/rc        -> ~/.config/polybar/config

pkg :: dunst notify-send.sh
etc/dunstrc             -> ~/.config/dunst/dunstrc

pkg :: zathura zathura-pdf-mupdf zathura-djvu
etc/zathurarc           -> ~/.config/zathura/zathurarc

etc/ -> ~/etc
src/ -> ~/src
bin/ -> ~/bin
tmp/ -> ~/tmp
usr/ -> ~/usr
"

# shells

bar hosts "
sudo curl :: https://raw.githubusercontent.com/stevenblack/hosts/master/hosts -o /etc/hosts
"

bar bash "
etc/bash.d/bash_profile -> ~/.bash_profile
etc/bash.d/bashrc       -> ~/.bashrc
etc/bash.d/aliases      -> ~/.aliases
"

bar zsh "
etc/zsh.d/zshenv        -> ~/.zshenv
etc/zsh.d/zshrc         -> ~/.config/zsh/.zshrc
#etc/zsh.d/modules       -> ~/.config/zsh/modules
"

# wms

bar bspwm "
pkg :: bspwm sxhkd
etc/bspwm.d/bspwmrc     -> ~/.config/bspwm/bspwmrc
etc/bspwm.d/sxhkdrc     -> ~/.config/sxhkd/sxhkdrc
"

bar awesomewm "
etc/awesome.d/rc.lua    -> ~/.config/awesome/rc.lua
etc/awesome.d/modules   -> ~/.config/awesome/modules
"

bar qtilewm "
etc/qtile.d/rc.py       -> ~/.config/qtile/config.py
"

# vim

bar vim "
pkg :: neovim xsel
etc/vim.d/vimrc         -> ~/.vimrc
etc/vim.d/nvim_init.vim -> ~/.config/nvim/init.vim
etc/vim.d/colors        -> ~/.config/nvim/colors
etc/vim.d/spellcheck    -> ~/.vim/spellcheck
etc/vim.d/thesaurus     -> ~/.vim/thesaurus
"

bar vifm "
etc/vifm.d/vifmrc       -> ~/.config/vifm/vifmrc
etc/vifm.d/colors       -> ~/.config/vifm/colors
etc/vifm.d/scripts      -> ~/.config/vifm/scripts
"

bar pypkgs "
pkg :: python-pip
pypkg :: pynvim neovim-remote ueberzug Jinja2 markdown2 Pygments inflect
"

tub default "base bash zsh bspwm vim hosts"

soap default
