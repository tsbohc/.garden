#!/bin/bash

read -d '' bundles << EOF
xorg:          xorg-server xorg-xinit xorg-xsetroot xterm xtitle xdo xdotool
pulseaudio:    pulseaudio pulseaudio-alsa alsa-utils
dev:           cmake lua jre-openjdk
wm:            feh picom dunst notify-send.sh wmctrl wmutils
bspwm:         bspwm lemonbar-xft-git ttf-unifont vifm sxhkd
neovim:        neovim python2-pip python-pip xsel
latex:         latex-mk texlive-most texlive-lang
zathura:       zathura zathura-pdf-mupdf zathura-djvu
media:         mpv
cli:           fzf bat
ex:            unzip
fonts:         tamzen-font-git
pip:           pynvim neovim-remote ueberzug Jinja2 markdown2 Pygments inflect
EOF

# paths on the left are relative to script's directory
read -d '' links << EOF
etc/                                 ~/etc
src/                                 ~/src
bin/                                 ~/bin
tmp/                                 ~/tmp
usr/                                 ~/usr
etc/bash.d/bash_profile              ~/.bash_profile
etc/bash.d/bashrc                    ~/.bashrc
etc/bash.d/aliases                   ~/.aliases
etc/zsh.d/zshenv                     ~/.zshenv
etc/zsh.d/zshrc                      ~/.config/zsh/.zshrc
etc/zsh.d/modules                    ~/.config/zsh/modules
etc/xorg.d/xinitrc                   ~/.xinitrc
etc/xorg.d/xresources.d/xresources   ~/.Xresources
etc/bspwm.d/bspwmrc                  ~/.config/bspwm/bspwmrc
etc/bspwm.d/sxhkdrc                  ~/.config/sxhkd/sxhkdrc
etc/awesome.d/rc.lua                 ~/.config/awesome/rc.lua
etc/awesome.d/modules                ~/.config/awesome/modules
etc/qtile.d/rc.py                    ~/.config/qtile/config.py
etc/polybar.d/rc                     ~/.config/polybar/config
etc/vim.d/vimrc                      ~/.vimrc
etc/vim.d/nvim_init.vim              ~/.config/nvim/init.vim
etc/vim.d/colors                     ~/.config/nvim/colors
etc/vim.d/spellcheck                 ~/.vim/spellcheck
etc/vim.d/thesaurus                  ~/.vim/thesaurus
etc/vifm.d/vifmrc                    ~/.config/vifm/vifmrc
etc/vifm.d/colors                    ~/.config/vifm/colors
etc/vifm.d/scripts                   ~/.config/vifm/scripts
etc/picom                            ~/.config/picom.conf
etc/zathurarc                        ~/.config/zathura/zathurarc
etc/dunstrc                          ~/.config/dunst/dunstrc
etc/lanternrc                        ~/.config/lanternrc
EOF

read -d '' directories << EOF
~/blueberry
EOF

# ===================================
# logging settings
# ===================================

i_link="."
i_run="$"
i_ok="+"
i_error="#"
i_question="?"
i_info="i"

# ===================================
# definitions
# ===================================

red="\x1b[31m"
green="\x1b[32m"
yellow="\x1b[33m"
blue="\x1b[34m"
gray="\x1b[90m"
escape="\x1b[0m"

opt_dry="yes"
opt_packages="no"
opt_vim="no"

sc_dir="${0%/*}" # i don;t think this is right ...
sc_name="${0##*/}"

# ===================================
# helpers
# ===================================

get_abspath() {
  echo "$(realpath -m --no-symlinks ${1/"~"/$HOME})"
}

log() { # $1 - icon, $2 - color, $3 - object, $4 - action
  color="$2"
  [[ "$color" == "$green" ]] && [[ "$opt_dry" == "yes" ]] && color="$gray"
  echo -e "${escape}[${color}${1}${escape}] ${3}: ${gray}${4}${escape}"
}

get_cpos() {
  exec < /dev/tty
  oldstty=$(stty -g)
  stty raw -echo min 0
  echo -en "\033[6n" > /dev/tty
  IFS=';' read -r -d R -a pos
  stty $oldstty
  # change from one-based to zero based so they work with: tput cup $row $col
  row=$((${pos[0]:2} - 1))    # strip off the esc-[
  col=$((${pos[1]} - 1))
  echo $row
}

run_command() { # $1 - icon, $2 - object, $3 - action
  if [[ $opt_dry == "no" ]]; then
    sc1=$(get_cpos)
    log "$1" "$green" "$2" "$3"
    sc3=$(get_cpos)
    #out=$($3 2>&1)

    $3 | tee -a "$HOME/.cache/.${sc_name}_log" |
      while read -r line
      do
        out+="
$line"
      tput cup "$sc3" 0 && tput ed
      echo "$out" | tail -n 10
    done
    tput cup "$sc3" 0 && tput ed

    sc2=$(get_cpos)
    tput cup "$sc1" 0
    if [[ $? -eq 0 ]]; then
      echo -e "$escape[$green+$escape]"
    else
      echo -e "$escape[$red#$escape]"
      cat "$HOME/.cache/.${sc_name}_log"
      rm "$HOME/.cache/.${sc_name}_log"
    fi
    tput cup "$sc2" 0
  else
    log "$1" "$green" "$2" "$3"
  fi
}

ask() {
  log "$i_question" "$yellow" "$1" "$2 [y/n] | \c"
  echo -ne "$escape"
  read -n 1 -r < /dev/tty # lack of redirect breaks the function in a while loop
  echo
  case "$REPLY" in
    Y|y) true ;;
    N|n) false ;;
    *)
      false
      log "$i_info" "$yellow" "$sc_name" "please enter a valid choice"
      ask "$1" "$2"
      ;;
  esac
}

# ===================================
# functions
# ===================================

fzf_edit() {
  if [[ -f /usr/bin/fzf ]]; then
    current_dir=$(pwd 2>&1)
    cd "$sc_dir"
    if [[ -f /usr/bin/bat ]]; then
      preview="bat --color=always --style=numbers --line-range :69"
    else
      preview="head -69"
    fi
    selected_file=$(find . -type f ! -path "*/.git*/*" ! -path "*/st-*/*" ! -path "*/fonts/*" \
      | cut -c 3- \
      | fzf --no-bold --reverse --preview="$preview {}" \
        --preview-window=right:70%)
    if [[ $selected_file != "" ]]; then
      $EDITOR $selected_file
      log "$i_run" "$green" "$sc_name" "$EDITOR $selected_file"
    fi
    cd "$current_dir"
  else
    log "$i_info" "$yellow" "fzf" "not found"
    if ask "$sc_name" "install it?"; then
      run_command "$i_run" "fzf" "sudo pacman -S fzf --noconfirm"
      echo ""
      fzf_edit
    fi
  fi
}

create_directories() {
  while read -r path; do
    abs_path=$(get_abspath $path)
    [[ ! -d "$abs_path" ]] && run_command "$i_ok" "$path" "mkdir -p $abs_path"
  done <<< "$directories"
}

install_packages() { # cherry pick packages that aren't already installed
  while read -r bundle; do
    bundle=($bundle) # removing this breaks everything
    name=${bundle[0]%?} # removes the colon
    clean_bundle=""
    case "$name" in
      pip|pip2)
        install_cmd="sudo $name install -q"
        for package in "${bundle[@]:1}"; do
          ! python -c "import $package" &> /dev/null && clean_bundle="$clean_bundle$package "
        done
        ;;
      *)
        install_cmd="yay -S --needed --noconfirm"
        for package in "${bundle[@]:1}"; do # :1 skips the first element (name)
          ! yay -Q $package > /dev/null 2>&1 && clean_bundle="$clean_bundle$package "
        done
        ;;
    esac
    [[ "$clean_bundle" != "" ]] && run_command "$i_run" "$name" "$install_cmd $clean_bundle"
  done <<< "$bundles"
}

create_symlinks() {
  while read -r line; do
    sleep 0.03
    line=($line)
    src=${line[0]}
    dst=${line[1]}
    if [[ "$dst" == "" ]]; then
      log "$i_error" "$red" "$src" "broken rule!"
      continue
    fi
    abs_src="${sc_dir}/$src"
    abs_dst=$(get_abspath "$dst")

    if [[ -f "$abs_src" ]] || [[ -d "$abs_src" ]]; then
      if [[ ! -e "$abs_dst" && ! -L "$abs_dst" ]]; then # if both are okay, proceed normally
        [[ ! -d "${abs_dst%/*}" ]] && run_command "$i_ok" "${abs_dst%/*}" "mkdir -p ${abs_dst%/*}"
        run_command "$i_link" "$src" "ln -s $abs_src $abs_dst"
      else # resolve conflicts
        if [[ -e "$abs_dst" && ! -L "$abs_dst" ]]; then
          if ask "$src" "attempt to override a non-symlink $dst, confirm?"; then
              rm -rf "$abs_dst"
              run_command "$i_link" "$src" "ln -s $abs_src $abs_dst"
          else
            log "$i_error" "$yellow" "$src" "skipping..."
          fi
        elif [[ -L "$abs_dst" ]]; then
          if [[ $(readlink -f "$abs_dst") == "$abs_src" ]]; then
            log "$i_link" "$green" "$src" "-eq readlink -f $abs_dst"
          else
            run_command "$i_link" "$src" "ln -sfn $abs_src $abs_dst"
          fi
        fi
      fi
    else
      log "$i_error" "$red" "$src" "missing source file!"
    fi
  done <<< "$links"
}

set_colors() {
  welcome
  show_colour() {
    perl -e 'foreach $a(@ARGV){print "\e[48;2;".join(";",unpack("C*",pack("H*",$a)))."m \e[49m"}' "$@"
  }
  preview() {
    [[ ! -f "$sc_dir/themes/$1" ]] && return
    echo
    while read l; do
      index=$(echo $l | awk '{ print $2 }')
      color=$(echo $l | awk '{ print substr($3,2) }')
      if [[ "$index" =~ "COLOR" ]]; then
        show_colour $color
        show_colour $color
        echo -n " "
      fi
    done <<< "$(cat $sc_dir/themes/$1)"
    echo "$1"
  }
  convert() {
    conversion_result=""
    while read l; do
      [[ ! "$l" == *"color"* ]] && [[ ! "$l" == *"ground"* ]] && continue
      new_line="#define "
      if [[ "$l" =~ "foreground" ]]; then
        new_line+="FOREGROUND "
      elif [[ "$l" =~ "background" ]]; then
        new_line+="BACKGROUND "
      else
        index=$(get_first_number "$l")
        new_line+="COLOR$index "
      fi
      color=$(echo "$l" | awk '{ print $2 }')
      new_line+="$color"
      conversion_result+="$new_line
"
    done <<< "$(cat $sc_dir/themes/$1)"
    echo
  }
  update_colors() {
    # check out SeungheonOh/xrdm!
    sequence=""
    while read l; do
      [[ $l != *"*."* ]] && continue
      lineseg=( $l )
      index=$(echo $l | sed -e "s/\s.*//" -e "s/^*.//" -e "s/color//" -e "s/:$//")
      color=$(echo $l | sed -e "s/.*\s//")
      # St only has partial support of Xterm Control Sequence(Most X-based term have this),
      # instead it uses 256th color for BG, and 257th color for FG
      # or whatever it is set to in config.h
      if [ "$index" == "background" ]; then
        sequence+="\033]11;${color}\007" # Background
        sequence+="\033]17;${color}\007" # Background
        sequence+="\033]17;${color}\007" # Background
        sequence+="\033]708;${color}\007" # Border
        sequence+="\033]4;257;${color}\007" # Background for ST wiredo
      elif [ "$index" == "foreground" ]; then
        sequence+="\033]10;${color}\007" # Foreground
        sequence+="\033]19;${color}\007" # Foreground
        sequence+="\033]4;256;${color}\007" # Foreground for ST wiredo
      else
        sequence+="\033]4;${index};${color}\007" # Colors
      fi
    done <<< "$(xrdb -query)"
    for tty in /dev/pts/[0-9]*; do
      printf "%b" "$sequence" > "$tty"
    done
  }
  get_first_number() {
    echo "$1" | sed 's@^[^0-9]*\([0-9]\+\).*@\1@'
  }

  choice=$(ls $sc_dir/etc/xorg.d/xresources.d/colors/ | fzf --height=10 --bind=esc:abort)

  if [[ "$choice" != "" ]]; then
    if ! grep -q "define" "$sc_dir/etc/xorg.d/xresources.d/colors/$choice"; then
      log "$i_info" "$yellow" "$choice" "is in regular .Xresources format"
      if ask "$sc_name" "convert to a sourceable bash script?"; then
        convert "$choice"
        echo -ne "$gray"
        echo "$conversion_result"
        echo -ne "$escape"
        if ask "$sc_name" "create colorscheme?"; then
          run_command "$i_run" "$sc_name" "mv $sc_dir/themes/$choice $sc_dir/themes/${choice}_old"
          echo "$conversion_result" >> "$sc_dir/themes/$choice"
          log "$i_ok" "$green" "$sc_name" "echo \"\$conversion_result\" >> $sc_dir/themes/$choice"
        else
          set_colors
          return
        fi
      else
        set_colors
        return
      fi
    fi

    preview $choice
    echo

    if [[ "$choice" != "" ]] && ask "$choice" "set this colorscheme?"; then
      [[ ! -f "$sc_dir/themes/$choice" ]] && echo "boo" && exit 1
      sed -i --follow-symlinks "/! theme/!b;n;c#include \"$sc_dir/themes/$choice\"" ~/.Xresources
      log "$i_ok" "$green" "$sc_name" 'sed -i --follow-symlinks "/! theme/!b;n;c#include \"$sc_dir/themes/$choice\"" ~/.Xresources'
      sed -i --follow-symlinks "/\" theme/!b;n;ccolorscheme $choice" $sc_dir/vimrc
      log "$i_ok" "$green" "$sc_name" 'sed -i --follow-symlinks "/\" theme/!b;n;ccolorscheme $choice" $sc_dir/vimrc'
      xrdb ~/.Xresources
      update_colors
      exit 0
    else
      set_colors
    fi
  fi
}

update() {
  opt_dry="no"
  current_dir=$(pwd 2>&1)
  welcome
  echo
  cd "$sc_dir"

  if [[ -f "$(get_abspath ~/.git-credentials)" ]]; then
    log "$i_info" "$yellow" "git" "credential store enabled"
  else
    log "$i_error" "$red" "$sc_name" "the following option is extremely insecure!"
    if ask "git" "enable credential store?"; then
      run_command "$i_run" "$sc_name" "git config credential.helper store"
      if ! git config --list | grep -q "user.email"; then
        log "$i_question" "$yellow" "git" "please enter user.email | \c"
        echo -ne "$escape"
        read useremail
        run_command "$i_run" "$sc_name" "git config --global user.email $useremail"
      fi
      if ! git config --list | grep -q "user.name"; then
        log "$i_question" "$yellow" "git" "please enter user.name | \c"
        echo -ne "$escape"
        read username
        run_command "$i_run" "$sc_name" "git config --global user.name $username"
      fi
    fi
  fi

  if ping -q -c 1 -w 1 google.com >/dev/null 2>&1; then
    run_command "$i_run" "$sc_name" "git fetch"
    git_status=$(git status 2>&1)
    git_porcelain=$(git status --porcelain 2>&1)
    log "$i_ok" "$green" "$sc_name" "git status"
    if [[ "$git_status" == *"behind"* ]]; then
      if ask "we're behind" "pull?"; then
        run_command "$i_run" "$sc_name" "git pull"
      fi
    elif [[ "$git_porcelain" != "" ]]; then
      if ask "we're ahead" "push?"; then
        run_command "$i_run" "$sc_name" "git add ."
        log "$i_question" "$yellow" "commit" "enter a message | \c"
        echo -ne "$escape"
        read commit_message
        git commit -m "$commit_message" >/dev/null
        log "$i_ok" "$green" "$sc_name" "git commit -m $commit_message"
        run_command "$i_run" "$sc_name" "git push"
      fi
    else
      log "$i_info" "$green" "$sc_name" "up to date <3"
    fi
  else
    log "$i_error" "$red" "$sc_name" "no internet connection"
  fi
  cd "$current_dir"
}

# ===================================
# init
# ===================================

welcome() {
  clear
  color=$green
  echo -e "
    ____    ___      __     _____     
   /',__\  / __'\  /'__'\  /\ '__'\   
  /\__, '\/\ \L\ \/\ \L\.\_\ \ \L\ \  
  \/\____/\ \____/\ \__/.\_\  \ ,__/  
   \/___/  \/___/  \/__/\/_/ \ \ \/   
                              \ \_\   
                               \/_/  "
}

usage="usage: bb {install|dry|update|edit} [-p] [-v]

perform:
   i, install     perform installation
   d, dry         just print without running
   u, update      sync to or from a git repo
   e, edit        fzf into $EDITOR in the script location
                  runs when no arguments are given
install:
  -p       install package bundles
  -v       set up nvim via plug"

if [[ $# -eq 0 || $1 == "e" || $1 == "edit" ]]; then
  # launch fzf if no arguments are supplied
  opt_dry="no"
  fzf_edit
  exit 1
else
  case $1 in # the first agrument has to be an action
    i|install)
      opt_dry="no";;
    d|dry)
      opt_dry="yes";;
    c|color)
      opt_dry="no"
      set_colors
      exit 0;;
    u|update)
      update
      exit 0;;
    h|help|*)
      echo "$usage"
      exit 1;;
  esac
  OPTIND=2 # makes getopts parse arguments starting from the second
  while getopts "pv" opt; do
    case $opt in
      p) opt_packages="yes";;
      v) opt_vim="yes";;
      *)
        echo "$usage"
        exit 1;;
    esac
  done
fi

# ===================================
# calls
# ===================================

welcome

# ask for sudo
if [[ "$opt_dry" == "no" ]]; then
  log "$i_ok" "$green" "$sc_name" "sudo -v"
  sudo -v
fi

# add color to pacman
if grep -Fqx "#Color" "/etc/pacman.conf"; then
  run_command "$i_run" "$sc_name" "sudo sed -i -e s/#Color/Color/g /etc/pacman.conf"
fi

# install yay if needed
if [[ ! -f /usr/bin/yay ]]; then
  current_dir=$(pwd 2>&1)
  cd $HOME
  run_command "$i_run" "$sc_name" "git clone https://aur.archlinux.org/yay.git"
  cd "yay"
  log "$i_ok" "$green" "$sc_name" "cd yay"
  run_command "$i_run" "$sc_name" "makepkg -si --noconfirm"
  cd ..
  log "$i_ok" "$green" "$sc_name" "cd .."
  run_command "$i_run" "$sc_name" "rm -rf yay"
  cd "$current_dir"
  if [[ ! -f /usr/bin/yay ]]; then
    log "$i_error" "$red" "$sc_name" "yay was not installed properly"
    exit 1
  fi
fi

# install/update system wide adblock
[[ ! -f /etc/hosts_bk ]] && run_command "$i_run" "hosts" "sudo cp /etc/hosts /etc/hosts_bk"
run_command "$i_run" "hosts" "sudo curl -S https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts -o /etc/hosts"

# install/update z
#run_command "$i_run" "z.sh" "curl -S --create-dirs https://raw.githubusercontent.com/rupa/z/master/z.sh -o ${sc_dir}/scripts/z.sh"

#run_command "$i_run" "thesaurus" "sudo curl -S --create-dirs https://raw.githubusercontent.com/zeke/moby/master/words.txt -o $HOME/.vim/thesaurus/mthesaur.txt"

create_directories

[[ "$opt_packages" == "yes" ]] && install_packages

if [[ "$opt_vim" == "yes" ]]; then
  [[ ! -f ~/.local/share/nvim/site/autoload/plug.vim ]] && run_command "$i_run" "nvim" "curl -S --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim -o $HOME/.local/share/nvim/site/autoload/plug.vim"
  if [[ "$opt_dry" == "no" ]]; then
    nvim +:PlugInstall +:qa
    log "$i_ok" "$green" "nvim" "nvim +:PlugInstall +:qa"
  else
    log "$i_run" "$green" "nvim" "nvim +:PlugInstall +:qa"
  fi
fi

create_symlinks

log "$i_ok" "$green" "$sc_name" "all done <3"
