#!/bin/bash

SOURCE=$HOME/.garden/etc/nvim/config
BAYLEAFMACROPATH=$HOME/.garden/etc/nvim/config/fnl/?.fnl

# switch to using $BAYLEAF as the dir
# those should be generated automatically as bayleaf/config/actual and bayleaf/config/recent
ACTUAL=$HOME/.cache/bayleaf/actual
RECENT=$HOME/.cache/bayleaf/recent



info() {
  m="$*"
  m=${m//\</\\\[}
  m=${m//\>/\\\]}
  dunstify -h string:x-dunst-stack-tag:bayleaf "bayleaf" "$m"
}

bail() {
  m="$*"
  m=${m//\</\\\[}
  m=${m//\>/\\\]}
  dunstify -h string:x-dunst-stack-tag:bayleaf -u critical "bayleaf" "$m"
  exit 1
}

compile() {
  local source=$1
  local target=${source/$SOURCE/$RECENT}
  if [[ $source == *".fnl" ]] && ! [[ $source == *"macros.fnl" ]]; then
    target=${target%.*}.lua
    temp=$HOME/.cache/bayleaf/outhadle
    out="$(fennel --add-macro-path "$BAYLEAFMACROPATH" --compile "$source" 2> "$temp")"
    err="$(<"$temp")"
    if [ -z "$err" ]; then
      mkdir -p "$(dirname "$target")"
      echo "$out" > "$target"
    else
      bail "${source##*/} compile failure\n$err" # ${err/stack traceback:*/}
    fi
  elif [[ $source == *".lua" ]]; then
    mkdir -p "$(dirname "$target")"
    if ! cp "$source" "$target"; then
      bail "${source##*/} copy failure"
    fi
  fi
}

switch-config() {
  ln -sf "$1/init.lua" "$HOME/.config/nvim/init.lua"
  ln -sfn "$1/fnl" "$HOME/.config/nvim/lua" # it's fnl because we are mirroring dir names
}

init() {
  if ! [ -d "$RECENT" ]; then
    while read -r source; do # note: this spams. a lot. but just once.
      compile "$source"
    done < <(find "$SOURCE" \( -name '*.fnl' -o -name '*.lua' \))
  fi
  if ! [ -d "$ACTUAL" ]; then
    cp -r "$RECENT" "$ACTUAL"
    switch-config "$ACTUAL"
  fi
}

testrun() {
  switch-config "$RECENT"
  local output
  measure_start="$(date +%s.%N)"
  output="$(nvim --headless -n +:q 2>&1 1>/dev/null)"
  measure_end="$(date +%s.%N)"
  if [ -z "$output" ]; then
    switch-config "$ACTUAL"
  else
    switch-config "$ACTUAL"
    bail "testrun failure\n${output//$HOME/\~}"
  fi
}

apply() {
  local source=$1
  local recent=${source/$SOURCE/$RECENT}
  local actual=${source/$SOURCE/$ACTUAL}
  if [[ $recent == *".fnl" ]]; then
    recent=${recent%.*}.lua
    actual=${actual%.*}.lua
  fi
  mkdir -p "$(dirname "$actual")"
  cp -f "$recent" "$actual"
  startup_time="$(echo "1000 * ($measure_end - $measure_start)" | bc -l)"
  info "${source##*/} updated (${startup_time%%.*}ms testrun)"
}

cleanup() {
  local source
  local recent
  while read -r actual; do
    source=${actual/$ACTUAL/$SOURCE}
    if ! [ -f "$source" ] && ! [ -f "${source%.*}.fnl" ]; then
      actual=${source/$SOURCE/$ACTUAL}
      recent=${source/$SOURCE/$RECENT}
      rm "$actual"
      rm "$recent"
    fi
  done < <(find "$ACTUAL" \( -name "*.fnl" -o -name "*.lua" \))
  while read -r actual; do
    if [ -z "$(ls -A "$actual")" ]; then
      recent=${actual/$ACTUAL/$RECENT}
      rmdir "$actual"
      rmdir "$recent"
    fi
  done < <(find "$ACTUAL" -type d)
}

init
compile "$1"
testrun
apply "$1"
cleanup
