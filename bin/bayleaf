#!/bin/bash

# could time headless startup just for fun
# switch to using $BAYLEAF as the dir

SOURCE="$HOME/.garden/etc/nvim/config"
ACTUAL="$HOME/.cache/bayleaf/actual"
RECENT="$HOME/.cache/bayleaf/recent"

# TODO clear own notifications with each run
info() { dunstify -h string:x-dunst-stack-tag:bayleaf "bayleaf" "$*" ; }
bail() { dunstify -h string:x-dunst-stack-tag:bayleaf  -u critical "bayleaf" "$*" ; exit 1 ; } # nb: doesn't work in subshells

compile() {
  local source=$1
  local target=${source/$SOURCE/$RECENT}
  if [[ $source == *".fnl" ]]; then
    target=${target%.*}.lua # replace the extension
    temp="$HOME/.cache/bayleaf/outhadle"
    out="$(fennel --compile "$source" 2> "$temp")"
    err="$(<"$temp")"
    if [ -z "$err" ]; then
      mkdir -p "$(dirname "$target")"
      echo "$out" > "$target"
      #info "${source##*/} compile success" # \n=> ${target/$HOME/\~}
    else
      # ${output/stack traceback:*/}
      bail "${source##*/} compile failure\n$err"
    fi
  else
    mkdir -p "$(dirname "$target")"
    if cp "$source" "$target"; then
      #info "${source##*/} copy success"
      :
    else
      bail "${source##*/} copy failure"
    fi
  fi
}

switch-config() {
  ln -sf "$1/init.lua" "$HOME/.config/nvim/init.lua"
  ln -sfn "$1/lua" "$HOME/.config/nvim/lua"
}

init() {
  # note: this spams. a lot. but just once.
  if ! [ -d "$RECENT" ]; then
    while read -r source; do
      compile "$source"
    done < <(find "$SOURCE" \( -name '*.fnl' -o -name '*.lua' \))
  fi
  if ! [ -d "$ACTUAL" ]; then
    cp -r "$RECENT" "$ACTUAL"
    switch-config "$ACTUAL"
  fi
}

testrun() {
  switch-config "$RECENT"
  local output
  measure_start="$(date +%s.%N)"
  output="$(nvim --headless -n +:q 2>&1 1>/dev/null)" # stderr
  measure_end="$(date +%s.%N)"
  if [ -z "$output" ]; then
    #info "testrun success"
    switch-config "$ACTUAL" # TODO replace
  else
    switch-config "$ACTUAL"
    bail "testrun failure\n${output//$HOME/\~}"
  fi
}

apply() {
  local source=$1
  local recent=${source/$SOURCE/$RECENT}
  local actual=${source/$SOURCE/$ACTUAL}
  if [[ $recent == *".fnl" ]]; then
    recent=${recent%.*}.lua
    actual=${actual%.*}.lua
  fi
  cp -f "$recent" "$actual"
  runtime="$(echo "1000 * ($measure_end - $measure_start)" | bc -l)"
  info "${source##*/} updated (${runtime%%.*}ms testrun)"
}

cleanup() {
  :
}

#info "$1"

init
compile "$1"
testrun
apply "$1"
