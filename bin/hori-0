#!/usr/bin/env bash

#: testing hori ideas

# hori autostart "$(hori ls -i)"

# {{{
import() { # transpile toml-like config into into bash variables
  local prefix=$2
  local section_re='^\[(.*)\]'
  local kvpair_re='(.*)[[:space:]]=[[:space:]](.*)'
  local import_re='\$\((import[[:space:]].*)\)'
  while read -r line; do
    if [[ $line =~ $section_re ]]; then
      local section=${BASH_REMATCH[1]/\./\_}_
    elif [[ $line =~ $kvpair_re ]]; then
      if [[ $prefix == "$section" ]]; then
        echo "__${section}${BASH_REMATCH[1]}=${BASH_REMATCH[2]}"
      else
        echo "__${prefix}${section}${BASH_REMATCH[1]}=${BASH_REMATCH[2]}"
      fi
    elif [[ $line =~ $import_re ]]; then
      eval "${BASH_REMATCH[1]} ${section}"
    fi
  done < "$REPO/hori-hori/$1"
}

template() { # render a string with config as context
  local input=$1
  local expr_re='\{%[[:space:]]([^ ]+)[[:space:]]%\}'
  local leaf_re='\{([^\{\}]+)\}'
  while [[ $input =~ $expr_re ]]; do
    expr=${BASH_REMATCH[0]}
    body=${BASH_REMATCH[1]}
    while [[ $body =~ $leaf_re ]]; do
      key=__${BASH_REMATCH[1]}
      body=${body/${BASH_REMATCH[0]}/${!key}}
    done
    input=${input/$expr/$body}
  done
  echo "$input"
}
# }}}

# -- actions

render() { #!ACTIONS render <file> and return its path
  local source=$REPO/$PACK/$1
  local target=$HORI/$PACK/$1
  mkdir -p "$(dirname "$target")"
  template "$(<"$source")" > "$target"
  echo "$target"
}

link() { #!ACTIONS create symlink from <source> to <target>
  [[ $1 == *"$HORI"* ]] && local source=$1 || local source=$REPO/$PACK/$1
  local target=${2/\~/$HOME}
  mkdir -p "$(dirname "$target")" # TODO replace with string manipulation
  ln -sfn "$source" "$target"
}

unlink() { #!ACTIONS remove <symlink>
  local target=${1/\~/$HOME}
  [[ -L $target ]] && rm "$target"
}

launch() { #!ACTIONS kill existing <process> and run <command>
  pkill -x "$1" ; sleep 0.2 ; "$@"
}

install() { #!ACTIONS just list the needed packages one per line
  local IFS=$'\n' ; echo "$*"
}

# -- trigger

hook() { # execute <hook> in <package(s)>
  local h=$1 ; shift
  case $* in
    -i|--installed) packages=("$HORI/"*) ;; # TODO could packages be local?
    -a|--available) packages=("$REPO/"*) ;;
    *) packages=("$@") ;;
  esac
  for p in "${packages[@]}"; do
    p=${p##*/} ; PACK=$p ; (
      . "$REPO/$p/hori.sh"
      if declare -F "$h" > /dev/null; then
        #case $h in
        #  add) mkdir -p "$HORI/$2" ;; # FIXME setup -> add
        #esac
        echo "hook: '$h' in '$p'"
        #"$h" "$2" "$@"
        #case $h in
        #  del) [[ -d "${HORI:?}/$2" ]] && rm -r "${HORI:?}/$2" ;; # FIXME remove -> del
        #esac
      fi
    ) ; unset PACK
  done
}

ls() { #!COMMANDS list packages (-i | -a)
  # TODO code repetition
  case $* in
    -i|--installed) packages=("$HORI/"*) ;; # TODO could packages be local?
    -a|--available|"") packages=("$REPO/"*) ;;
  esac
  for p in "${packages[@]}"; do
    p="${p##*/}"
    [[ -f "$REPO/$p/hori.sh" ]] && echo "$p"
  done
}

# -- prep

HORI="$HOME/.config/hori"
REPO="$(find ~ -type f -name "repository.hori" -print -quit)" ; REPO=${REPO%/*}
[[ -z $REPO ]] && { echo "could not find repo, aborting..." ; exit ; }
eval "$(import conf)" && conf_status="evaluated"

# -- main

while read -r line; do
  re='(.*)\(\)[[:space:]]\{[[:space:]]#!([^[:space:]]*)[[:space:]](.*)'
  if [[ $line =~ $re ]]; then
    sections+=("${BASH_REMATCH[2]}")
    (( ${#BASH_REMATCH[1]} > max )) && max=${#BASH_REMATCH[1]}
    declare -A "${BASH_REMATCH[2]}"
    eval "${BASH_REMATCH[2]}[${BASH_REMATCH[1]}]='${BASH_REMATCH[3]}'"
  fi
done < "$0"

if [ -z "$1" ] || [[ $1 =~ -h|--help ]]; then

  echo "COMMANDS"
  for f in "${!COMMANDS[@]}"; do
    echo -n "  $f"
    printf "%-$(( max - ${#f} + 2 ))s" " "
    echo "${COMMANDS[$f]}"
  done

  echo

  echo "ACTIONS"
  for f in "${!ACTIONS[@]}"; do
    echo -n "  $f"
    printf "%-$(( max - ${#f} + 2 ))s" " "
    echo "${ACTIONS[$f]}"
  done


elif [ ${COMMANDS[$1]+exists} ]; then
  "$@"
else
  hook "$@"
fi




# TODO
# edit command to edit a package (hori.sh)
# hori -edit "$(fzf hori -ls)"
# or just bake the fzf into the command if available
